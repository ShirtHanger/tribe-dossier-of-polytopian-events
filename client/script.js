const portLink = `http://localhost:3001`

/*
================== 
DOM ELEMENTS
==================
 */

const tribeListContainer = document.querySelector('.tribe-list-container')
const tribeListHeader = document.querySelector('#tribe-list-header')
const tribeListCaption = document.querySelector('#tribe-list-caption')

let fullListOfTribes
let randomTribeArray = []
let randomTribeArrayFromSort = []
let selectedTribe

/* DOM elements generated by Initial Load and Reloads */

let tribePreview, tribeLinkButtons, tribePreviewPictures

tribeResults = []

/* Buttons */

const allTribeButton = document.querySelector('#all-tribe-button')
const freeTribeButton = document.querySelector('#free-tribe-button')
const paidTribeButton = document.querySelector('#paid-tribe-button')
const humanTribeButton = document.querySelector('#human-tribe-button')
const specialTribeButton = document.querySelector('#special-tribe-button')
const randomTribeButton = document.querySelector('#random-tribe-button')


/* Loads page with ALL tribes for user to select from */
window.addEventListener('load', async () => {

    fullListOfTribes = await getTribes()

    /* Shuffles list of tribes so user is more likely to see more tribes */

    fullListOfTribes.sort((a, b) => 0.5 - Math.random())
    
    /* Custom sort */
    /* https://dev.to/codebubb/how-to-shuffle-an-array-in-javascript-2ikj */

    // Note to self, try to find a way to shuffle this array that actually makes sense to you

    
    tribeListHeader.textContent = `Tribes`
    tribeListCaption.textContent = `All tribes of the square!`

    createTribeList(fullListOfTribes, randomTribeArray)

    localStorage.setItem('allTribes', randomTribeArray)
    console.log('ALL RANDOM TRIBES', randomTribeArray)

})

allTribeButton.addEventListener('click', async () => {

    fullListOfTribes.sort((a, b) => 0.5 - Math.random())

    tribeListHeader.textContent = `Tribes`
    tribeListCaption.textContent = `All tribes of the square!`
    createTribeList(fullListOfTribes)
    


})

freeTribeButton.addEventListener('click', async () => {

    let freeTribes = await getTribes('free')
    freeTribes.sort((a, b) => 0.5 - Math.random())

    /* Shuffles list of tribes so user is more likely to see more tribes */

    tribeListHeader.textContent = `Free Tribes`
    tribeListCaption.textContent = `The big hitters of the square!`

    createTribeList(freeTribes)
    


})

paidTribeButton.addEventListener('click', async () => {
    let paidTribes = await getTribes('paid')
    paidTribes.sort((a, b) => 0.5 - Math.random())

    /* Shuffles list of tribes so user is more likely to see more tribes */

    tribeListHeader.textContent = `Paid Tribes`
    tribeListCaption.textContent = `Various clans and kingdoms that leave a stronger impression than most...`
    createTribeList(paidTribes)
     


})

humanTribeButton.addEventListener('click', async () => {
    let humanTribes = await getTribes('human')
    humanTribes.sort((a, b) => 0.5 - Math.random())

    /* Shuffles list of tribes so user is more likely to see more tribes */

    tribeListHeader.textContent = `Human Tribes`
    tribeListCaption.textContent = `Human tribes. Plentiful, bold, and cordial...`

    createTribeList(humanTribes)
    


})

specialTribeButton.addEventListener('click', async () => {
    let specialTribes = await getTribes('special')
    specialTribes.sort((a, b) => 0.5 - Math.random())

    /* Shuffles list of tribes so user is more likely to see more tribes */

    tribeListHeader.textContent = `Special Tribes`
    tribeListCaption.textContent = `These guys are a bit out of this world...`

    createTribeList(specialTribes)
    


})

/* If they can't decide, this random tribe button will give them a random one */
randomTribeButton.addEventListener('click', async () => {

            randomIndex = randNum(randomTribeArray.length)

            loadUpTribe(randomTribeArray[randomIndex])
    
})

/* 
==================
FUNCTIONS
==================
 */

/* Axios call */
async function getTribes(category = null) {
    if (category) {
        response = await axios.get(`${portLink}/tribes/type/${category}`)
    } else {
        response = await axios.get(`${portLink}/tribes`)
    }
    return response.data
}

/*  */
function createTribeList(tribeResponse, tribeArray = null) {
    tribeListContainer.innerHTML = ``

    for (tribe of tribeResponse) {

        appendTribeToList()

        if (tribeArray) {

            tribeArray.push(tribe.name)

        }

    } 

    redefineTribeLinks()
    
}

/* (Had a major glitch last minute, when tribes were sorted, ALL links would return random tribes instead of the target
Turns out I had to redefine event listeners and DOM elements inside of each button event listener. Wrapped it into function) */

/* Will redefine each button generated by DOM via empty global DOM variables so they link to proper tribes */
async function redefineTribeLinks() {

    /* These are global, therefore can be redefined */
    tribePreview = document.querySelectorAll('.tribe-preview')
    tribeLinkButtons = document.querySelectorAll('#tribe-link-button')
    tribePreviewPictures = document.querySelectorAll('.tribe-preview-picture')

    tribeResults = [...tribeLinkButtons, ... tribePreviewPictures]

    for (let tribeResult of tribeResults) {
        tribeResult.addEventListener('click', async () => {

            if (tribeResult.alt || tribeResult.textContent) {

                loadUpTribe(tribeResult.alt || tribeResult.textContent)

            } else {
                console.log(`Error, IDK`)
            }
        })
    }
}

/* Adds a tribe to the sort result container */

function appendTribeToList() {
    let tribeItem = document.createElement('article')
    tribeItem.classList.add('tribe-preview')
    
    tribeItem.innerHTML = `

    <div>
    
    <a href="tribeData.html"><img src="${tribe.headImageURL}" alt="${tribe.name}" class="tribe-preview-picture" ></a>
    
    </div>

    <button id="tribe-link-button"><a href="tribeData.html">${tribe.name}<a></button>

    <p class="tribe-preview-description">${tribe.description}</p>`


    tribeListContainer.appendChild(tribeItem)
    tribeItem.style.backgroundColor = tribe.colorHex
}

/* Returns a random number between 0 and the length of given array */
/* Used for random tribe button */
function randNum(maxNum) {

    randIndex = Math.floor(Math.random() * maxNum) // Copied this from my Pokemon Album Prework, edited for this
    return randIndex
}

function loadUpTribe(tribeName) {

    selectedTribe = tribeName
    console.log('YOU SELECTED:', selectedTribe)

    localStorage.setItem('loadedTribe', selectedTribe)
    /* Allows the tribe's name to be passed onto the tribeData.js file */
}